null = {0} is Null!
parameter.null = input parameter[{0}] is NULL!
file.notExist = file {0} is not exist!
file.isDirectory = file {0} is Directory!
loadFile.failed = load file {0} failed!Exception is {1}
type.unsupport = Unsupport Type[{0}]!
ConfigManager.getFullPathFileName.webApp = WebApp model! only Java model can use this method!
ConfigManager.getInputStream.webApp = WebApp! Please setServletContext first!
ConnectionManager.init.jdbcDriver.failed = initial jdbc driver failed!Exception is {0}
ConnectionManager.init.connPool.failed = init connction pool failed!Exception is {0}
ConnectionManager.init.datasource.failed = lookup DataSource[{0}] failed!Exception is {1}
ConnectionManager.init.type.wrong = Wrong <type> : [{0}]! it should in ({1},{2},{3})
DailyAndSizeRollingFileAppender.updateNewFilePath.updateLogFilePath.failed = ERROR: update Log filePath  is failed !
DailyAndSizeRollingFileAppender.updateNewFilePath.createLogFilePath.failed = ERROR: create Log filePath  is failed !
ByteBuffer.destByte.null = dest byte[] is null
ByteBuffer.sourceByte.null = source byte[] is null
ClassUtil.attribute.null = attribute "{0}" is null
ClassUtil.createClassLoader.libPath.notExist = libPath[{0}] doesn't exist!
ClassUtil.createClassLoader.libPath.notDirectory = libPath[{0}] is not a directory!
ClassUtil.createClassLoader.libPath.canNotRead = libPath[{0}] can not be read!
ClassUtil.getAllJarUrl.listJar.error = list jar[{0}] error!Exception is {1}
FileUtil.sourceFile.notExist = source fileName does not exist!
FileUtil.sourceFile.null = source fileName is null!
FileUtil.sourceFile.destFile.same = same source fileName and dest fileName
FileUtil.sourcePath.destPath.same = same srcPath and destPath
FileUtil.sourcePath.notExist = srcPath[{0}] is not exist!
FileUtil.destPath.notDirectory = destPath[{0}] is not a directory!
MapUtil.getValue.wrongPath.notLegalArray.1 = Wrong path:{0}! it's not a legal array expression!
MapUtil.getValue.wrongPath.notLegalArray.2 = Wrong path:{0}! it's not a legal array expression!Exception is {1}
MapUtil.getValue.wrongPath.notLegalArray.3 = Wrong path:{0}! it's not a legal array expression! index[{1}]<0
MapUtil.getValue.wrongPath.notList.1 = Wrong path:{0}! its value[{1}] is not a List!
MapUtil.getValue.wrongPath.notList.2 = Wrong path:{0}! the value[{1}] which will be set as a List is not a List!
MapUtil.getValue.wrongPath.notList.3 = Wrong path:{0}! its current value[{1}] is not a List!
MapUtil.getValue.wrongPath.noLowerKey = Wrong path:{0}! no lower key!
MapUtil.getValue.wrongPath.notMap = Wrong path:{0}! the first object[{1}] is not a Map!
MapUtil.getValue.wrongPath.canNotHaveLowerKey = Wrong path:{0}! the first level key is a array! array can't have lower level key
MapUtil.printMap.mapStruct = Map Struct:
SecurityUtil.getKeyByDES.pasLength = password's length must be at least 512
SecurityUtil.getKeyBy3DES.pasLength = password's length must be 16 or 24
SecurityUtil.getKeyByBlowFish.keySize = Keysize must be multiple of 8, and can only range from 32 to 448
SecurityUtil.encryptByDesOtherMode.canNotUseIV = ECB mode cannot use IV
SecurityUtil.encryptByDesOtherMode.useIV = {0} mode should have a iv
SecurityUtil.encryptByDesOtherMode.lengthMode.be8 = secIv's length mode be 8
SecurityUtil.encryptByDesOtherMode.lengthMode.be16 = secIv's length mode be 16
SecurityUtil.getKeyPairByDSA.moduleSize = Modulus size must range from 512 to 1024 and be a multiple of 64
SecurityUtil.getKeyPairByRSA.keySize = KeySize must be at least 512
BeanShell.eval.TargetError = script execute error: exception raised at Line[{0}], statement[{1}] exception:{2}, script:[\n{3}\n]\n
BeanShell.eval.ParseException = script compile error: {0}, script:[\n{1}\n]\n
BeanShell.eval.EvalError = script execute error at Line[{0}], statement[{1}], script:[\n{2}\n]\nreason:{3}\n
MapSerializer.deserialize.noBytes = no bytes for deserialize
MapSerializer.key.notSet = key not set!
MapClient.connect = connect to server failed!
MapClient.send = send message failed!
MapClient.receive = receive message failed!
MapXmlSerializer.deserialize.noBytes = no bytes for deserialize
MapXmlSerializer.serialize.class.canNotSerialize = Cannot serialize value of class {0}
MapXmlSerializer.serialize.locale.wrong = Locale string should be length 2, 5, or greater than 6,but current locale string is {0}
MapXmlSerializer.deserialize.key.notSet = key not set!
MapXmlSerializer.deserialize.set.wrongType = error Set type for '{0}'
MapXmlSerializer.deserialize.list.wrongType = error List type for '{0}'
MapXmlSerializer.deserialize.map.wrongType = error Map type for '{0}'
MapXmlSerializer.deserializer.wrongType = error type for '{0}'
ByteBuffer.index.outOfBounds = start[{0}] + length[{1}] > size[{2}]!
StringUtil.formatXmlValue.isInvalidXmlString = Input String[{0}] is not a valid Xml String!
MapClient.prepareSendRequest.error = Prepare Request Message Failed!Exception is {0}
MapClient.deserializeResponse.error = Deserialize Response Message Failed!Exception is {0}=======
MapClient.receive = receive message failed!
MapXmlSerializer.deserialize.noBytes = no bytes for deserialize
MapXmlSerializer.serialize.class.canNotSerialize = Cannot serialize value of class {0}
MapXmlSerializer.serialize.locale.wrong = Locale string should be length 2, 5, or greater than 6,but current locale string is {0}
MapXmlSerializer.deserialize.key.notSet = key not set!
MapXmlSerializer.deserialize.set.wrongType = error Set type for '{0}'
MapXmlSerializer.deserialize.list.wrongType = error List type for '{0}'
MapXmlSerializer.deserialize.map.wrongType = error Map type for '{0}'
MapXmlSerializer.deserializer.wrongType = error type for '{0}'
ByteBuffer.index.outOfBounds = start[{0}] + length[{1}] > size[{2}]!
